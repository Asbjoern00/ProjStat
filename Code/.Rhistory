dfnew$gam_pred <- gam_pred
dfnew$glm_pred <- glm_pred
dfnew$glmnet_pred <- glmn_pred
dfnew$true_prob <- new_sim[["true_cond_mean"]][["cond_Y_true"]]
#equally good performance
dfnew %>% summarise(gam_perf = mean((true_prob - gam_pred)^2), glm_perf = mean((true_prob - glm_pred)^2), glmn_perf = mean((true_prob - glmnet_pred)^2))
new_sim
source("simulate.R")
source("LearnerTypes.R")
df <- simulate_from_model(g,m, theta = 1, n = 50)$out_frame
gam <- GAM$new(Y ~ s(w1, by = w2) + A)
glm <- GLM$new(Y ~ . )
glmnet <- GLMNet$new(Y ~. )
gam$fit(df)
glm$fit(df)
glmnet$fit(df)
new_sim <- simulate_from_model(g,m,theta = 5, n = 5000)
dfnew <- new_sim$out_frame
glm_pred <- glm$predict(dfnew)
gam_pred <- gam$predict(dfnew)
glmn_pred <- glmnet$predict(dfnew)
dfnew$gam_pred <- gam_pred
dfnew$glm_pred <- glm_pred
dfnew$glmnet_pred <- glmn_pred
dfnew$true_prob <- new_sim[["true_cond_mean"]][["cond_Y_true"]]
#equally good performance
dfnew %>% summarise(gam_perf = mean((true_prob - gam_pred)^2), glm_perf = mean((true_prob - glm_pred)^2), glmn_perf = mean((true_prob - glmnet_pred)^2))
new_sim$avg_effect
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 5000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE)
source("~/Desktop/ProjStat/Code/test_estimator.R")
traceback()
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE))
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
traceback()
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 5000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
traceback
traceback()
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 5000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 5000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 5000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0, n = 5000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("~/Desktop/ProjStat/Code/test_estimator.R")
self$mean_lrn$fit(df)
self$mean_lrn$fitted
#Do the same as above but with the whole dataset as we are not cross-fitting
for_predict <- df
for_predict
self$mean_lrn$name
self$mean_lrn$fitted$call
for_predict
for_predict[[self$trt_var_name]] <- 0
for_predict
df$cond_mean_ctrl <- self$mean_lrn$predict(for_predict)
df
for_predict[[self$trt_var_name]] <- 1
df$cond_mean_trt <- self$mean_lrn$predict(for_predict)
df
# Get name of response, don't want this included in estimation
resp_name <- as.character(self$mean_lnr$formula[2])
resp_name
self$mean_lnr$formula[2]
self$mean_lnr$formula
self$mean_lrn
self$mean_lrn$formula
as.character(self$mean_lrn$formula[2])
# Get name of response, don't want this included in estimation
resp_name <- as.character(self$mean_lrn$formula[2])
dplyr::select(df, -c(resp_name,"cond_mean_trt", "cond_mean_ctrl"))
self$prp_lrn$fit(dplyr::select(df, -c(resp_name,"cond_mean_trt", "cond_mean_ctrl")))
df$prop_score <- self$prp_lrn$predict(dplyr::select(df, -c(resp_name,"cond_mean_trt", "cond_mean_ctrl")))
df
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLMNet$new(Y ~ .))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 2, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 2, n = 10000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 2, n = 1000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("~/Desktop/ProjStat/Code/test_estimator.R")
df
df$cond_mean_ctrl
mean(df$cond_mean_trt - df$cond_mean_ctrl
+df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt)
- (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl))
df$prop_score
max(df$prop_score)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0.2, n = 1000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 0.2, n = 1000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 1000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 1000)
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt)
- (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df$contrast <- df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt)
- (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df$contrast <- df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt)
- (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df
(1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt)
- (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df
df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt)
- (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df$contrast <- df[[self$trt_var_name]]/df$prop_score*(df$Y - df$cond_mean_trt) - (1-df[[self$trt_var_name]])/(1-df$prop_score)*(df$Y - df$cond_mean_ctrl)
df
mean(df$contrast)
mean(A)
mean(df$A)
sim_data$avg_effect
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 10000)
sim_data$avg_effect
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 10000)
sim_data$avg_effect
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 1, n = 10000)
sim_data$avg_effect
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 2, n = 10000)
sim_data$avg_effect
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GAM$new(Y ~ s(w1, by = w2) + A))
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 2, n = 10000)
sim_data$avg_effect
#Fit estimator
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
#Simulate data with theta = 1
sim_data <- simulate_from_model(g,m, theta = 2, n = 1000000)
sim_data$avg_effect
sim_data <- simulate_from_model(g,m, theta = 2, n = 1000)
estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
for(i in 1:100){
sim_data <- simulate_from_model(g,m, theta = 2, n = 1000)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
}
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(100)
for(i in 1:100){
sim_data <- simulate_from_model(g,m, theta = 2, n = 1000)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
}
hist(theta)
mean(theta)
sd(theta)
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(100)
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(100)
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(200)
for(i in 1:200){
sim_data <- simulate_from_model(g,m, theta = 2, n = 5000)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
print(i)
}
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta)
ggplot(df, aes(x = theta)) + geom_histogram() + geom_vline(xintercept = 0.370, color = "red")
theta
theta[theta>0]
length(theta[theta>0])
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram() + geom_vline(xintercept = 0.370, color = "red")
ggplot(df, aes(x = theta)) + geom_histogram(bins = 10) + geom_vline(xintercept = 0.370, color = "red")
ggplot(df, aes(x = theta)) + geom_histogram(bins = 15) + geom_vline(xintercept = 0.370, color = "red")
ggplot(df, aes(x = theta)) + geom_histogram(bins = 15) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
mean(theta)
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(200)
for(i in 1:200){
sim_data <- simulate_from_model(g,m, theta = 2, n = 10000)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
print(i)
}
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 15) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
theta <- numeric(1000)
for(i in 1:1000){
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = TRUE, cross_fit = FALSE)
print(i)
}
library(ggplot2)
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 15) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
ggplot(df, aes(x = theta)) + geom_histogram(bins = 12) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
df
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(1000)
for(i in 1:1000){
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = FALSE, cross_fit = FALSE)
print(i)
}
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
thetas
theta
mean(theta)
len(thetha)
length(thetha)
length(thetha)
length(theta)
df
sim_data
sim_data$Y
sim_data$out_frame
mean(sim_data$out_frame)
mean(sim_data$out_frame$Y)
mean(sim_data$out_frame$A)
mean(sim_data$out_frame$A)
mean(sim_data$out_frame$Y)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLM$new(Y ~ w1 + w2 + A))
#Simulate data with theta = 1
#True parameter = 0.370
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(100)
for(i in 1:100){
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = FALSE, cross_fit = FALSE)
print(i)
}
library(ggplot2)
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(1000)
for(i in 1:1000){
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = FALSE, cross_fit = FALSE)
print(i)
}
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLM$new(Y ~ w1 + w2 + A))
#Simulate data with theta = 1
#True parameter = 0.370
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(100)
for(i in 1:100){
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = FALSE, cross_fit = FALSE)
print(i)
}
library(ggplot2)
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLM$new(Y ~ w1 + w2 + A))
#Simulate data with theta = 1
#True parameter = 0.370
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(1000)
for(i in 1:1000){
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = FALSE, cross_fit = FALSE)
print(i)
}
library(ggplot2)
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
sim_data
sim_data$avg_effect
sim_data$out_frame
mean(sim_data$out_frame$Y)
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLM$new(Y ~ w1 + w2 + A))
#Simulate data with theta = 1
#True parameter = 0.370
#Repeat experiment 100 times, each time simulating 1000 data points
theta <- numeric(1000)
for(i in 1:1000){
sim_data <- simulate_from_model(g,m, theta = 1, n = 500)
theta[i] <- estimator$fit(sim_data$out_frame, one_step = FALSE, cross_fit = FALSE)
print(i)
}
library(ggplot2)
#make dataframe of theta values and plot histogram with a vertical line at 0.370 (true effect)
df <- tibble(theta = theta[theta>0])
ggplot(df, aes(x = theta)) + geom_histogram(bins = 20) + geom_vline(xintercept = 0.370, color = "red") + theme_minimal()
sim_data$avg_effect
#readRDS("/home/asr/Desktop/ProjStat/Data/processeddata.rds")
library(tidyverse)
m <- function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))-2
}
g <- function(w1,w2){
w2*exp(cos(w1))/exp(sin(10*w1))/6 # divide by 6 to not make the this too large
}
simulate_from_model <- function(g,m,theta=0.5, n = 10000){
#Simulate covariates
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
#simulate A
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
#Convert to a probability (the true conditional mean of Y given A and W)
sim <- (A+0.1)*theta*g(w1,w2)
p <- logit(sim)
cond_mean_trt <- mean(logit((1+0.1)*theta*g(w1,w2))
cond_mean_c <- mean(logit((0.1)*theta*g(w1,w2)))
source("Estimator.R")
source("LearnerTypes.R")
source("simulate.R")
#Initialise estimator Class with using GLMnet as propensity learner and GLMnet as mean learner
estimator <- Estimator$new(prp_lrn = GLMNet$new(A ~ w1+w2), mean_lrn = GLM$new(Y ~ w1 + w2 + A))
sim_data <- simulate_from_model(g,m, theta = 1, n = 500)
sim_data
sim_data <- simulate_from_model(g,m, theta = 2, n = 500)
sim_data
sim_data <- simulate_from_model(g,m, theta = 3, n = 500)
sim_data
