train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
train_unbalanced
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
sum(balanced_pred_test)/test_size
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response") > 0.5
sum(unbalanced_pred_test)/test_size
unbalanced_pred_test
Y
sum(unbalanced_pred_test)
Y
sum(Y)
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
mean(balanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response") > 0.5
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
sum(Y)
sum(Y)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response")
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response")
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response")
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response")
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
library(dplyr)
n <- 10000
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response")
mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
mean(unbalanced_pred_test)
unbalanced_pred_test
unbalanced_pred_test
unbalanced_pred_test
unbalanced_pred_test
unbalanced_pred_test
library(dplyr)
n <- 10000
bias_unbalanced <- numeric(1000)
bias_balanced <- numeric(1000)
library(dplyr)
n <- 10000
bias_unbalanced <- numeric(1000)
bias_balanced <- numeric(1000)
for i in 1:1000{
library(dplyr)
n <- 10000
bias_unbalanced <- numeric(1000)
bias_balanced <- numeric(1000)
for( i in 1:1000){
X <- 2*rnorm(n)^2
eps <- rnorm(n)
Y <- rbinom(n, 1, p = exp(X+eps)/(exp(X+eps) +1))
train_size <- 1600
test_size <- n-train_size
train_idx_balanced <- c(sample(which(Y==1), train_size/2) , sample(which(Y == 0), train_size/2))
train_idx_unbalanced <- sample(1:n, train_size)
test_idx_balanced <- setdiff(1:n, train_idx_balanced)
test_idx_unbalanced <- setdiff(1:n, train_idx_unbalanced)
train_balanced <- tibble(X = X[train_idx_balanced], Y = Y[train_idx_balanced])
test_balanced <- tibble(X = X[test_idx_balanced], Y = Y[test_idx_balanced])
train_unbalanced <- tibble(X = X[train_idx_unbalanced], Y = Y[train_idx_unbalanced])
test_unbalanced <- tibble(X = X[test_idx_unbalanced], Y = Y[test_idx_unbalanced])
balanced <- glm(Y ~ X, data = train_balanced, family = binomial())
balanced_pred_test <- predict(balanced, newdata = test_balanced, type = "response")
bias_balanced[i] <- mean(Y) - mean(balanced_pred_test)
unbalanced <- glm(Y ~ X, data = train_unbalanced, family = binomial())
unbalanced_pred_test <- predict(unbalanced, newdata = test_unbalanced, type = "response")
bias_unbalanced[i] <- mean(Y)-mean(unbalanced_pred_test)
}
tibble(balanced_bias = bias_balanced, unbalanced_bias = bias_unbalanced)
df <- tibble(balanced_bias = bias_balanced, unbalanced_bias = bias_unbalanced)
library(ggplot2)
ggplot(df, aes(x= balanced_bias)) + geom_histogram()
df, aes(x= unbalanced_bias)) + geom_histogram()
ggplot(df, aes(x= unbalanced_bias)) + geom_histogram()
ggplot(df, aes(x= balanced_bias)) + geom_histogram() + theme_bw()
ggplot(df, aes(x= unbalanced_bias)) + geom_histogram() + theme_bw()
install.packages("svd")
mat <- matrix(rnorm(400), nrows = 40, 10)
mat <- matrix(rnorm(400), nrow = 40, ncol = 10)
svd(mat)
u <- svd(mat)
u <- svd(mat)$u
u
u %*% t(u)
t(u) %*% u
u <- svd(mat)$v
t(u) %*% u
u %*% t(u)
setwd("/home/asr/Desktop/ProjStat/Code")
source("Experiment.R")
source("Estimator.R")
source("Simulator.R")
source("LearnerTypes.R")
#options(error = recover, warn = 2)
#SIMULATION SETTINGS
nsim <- 300
n <- 3000
sim <- Simulator$new(n = n, sim_cov = sim_cov, sim_A = sim_A, sim_Y = sim_Y)
rf_hyperparams <- list(
num.tree = 1000
)
miss_spec_prp <- GLM$new(A ~ w3 + w4 + w5 + w6 + w7 + w8 + w9 + w10-1, name = "GLM misspec.")
corr_spec_prp <- GLM$new(A ~ w1+w2+w3, name = "GLM corr. spec.")
prp_reg <- GLMNet$new(A~., name = "GLMNet")
mean_rf_oob <- RF$new(Y~., name = "RF mean OOB",oob = TRUE, hyperparams =rf_hyperparams)
mean_rf_ib <- RF$new(Y~., name = "RF mean",oob = FALSE, hyperparams =rf_hyperparams)
#Create list of Experiment objects to illustrate difference between using inbag and out of bag samples for random forests
# All using TMLE as the estimator
# 1. corr_spec_prp and mean_rf_oob
# 2. corr_spec_prp and mean_rf_ib
# 3. corr_spec_prp and mean_rf_ib but with cross-fit set to 2
exps <- list(
Experiment$new(sim = sim, est = TMLE$new(prp_lrn = corr_spec_prp, mean_lrn = mean_rf_oob,cross_fit = FALSE) , n_sim = nsim),
Experiment$new(sim = sim, est = TMLE$new(prp_lrn = corr_spec_prp, mean_lrn = mean_rf_ib,cross_fit = FALSE), n_sim = nsim),
Experiment$new(sim = sim, est = TMLE$new(prp_lrn = corr_spec_prp, mean_lrn = mean_rf_ib,cross_fit = 2), n_sim = nsim)
)
# For loop to run all experiments
for(i in 1:length(exps)){
exps[[i]]$run()
}
#Save results in folder
saveRDS(exps, file = "/home/asr/Desktop/ProjStat/Code/RandomForestExp/oob_experiment.rds")
exps[[1]]
exps[[2]]
exps[[3]]
exps[[3]]$plotci()
exps[[2]]$plotci()
exps[[1]]$plotci()
exps[[3]]$plotci()
exps[[0]]$plotci()
exps[[1]]$plotci()
exps[[2]]$plotci()
exps[[2]]$plotdist()
exps[[1]]$plotdist()
exps[[3]]$plotdist()
exps[[2]]$plotdist()
exps[[1]]$plotdist()
exps[[1]]$plotci()
exps[[2]]$plotci()
exps[[3]]$plotci()
exps1[[1]]
exps[[1]]
exps[[1]]$plotdist()
exps[[2]]$plotdist()
