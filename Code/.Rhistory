if(type == "count"){
geom <- geom_col(fill = gray(0.5))
}
else{
geom <- geom_density(fill = gray(0.5))
}
lambda <- function(df, col){
#    if (!(col %in% c("age2", "year"))) {
#      count_text <- geom_text(aes(x = `get(col)`, y = mean(count),
#                                  label = paste(round(count*1e-3,0),"K",sep="")), size = 2)
#    } else {
count_text <- c()
#    }
df %>% group_by(get(col)) %>% summarise(count = n()) %>%
ggplot(aes(x = `get(col)`, y = count)) + geom + ylab("") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.2)) +
count_text + xlab(col)
}
lst_plt <- lapply(colnames(df), lambda, df = df)
n <- length(lst_plt)
do.call("grid.arrange", c(lst_plt, ncol=ncol))
}
check_for_redundancy <- function(df){
for(col1 in colnames(df)){
for(col2 in colnames(df)){
off_diag <- matrix(table(df[[col1]], df[[col2]]), nrow = 2)[1,2]
if (off_diag == 0 & col1 != col2){
print(c(col1,col2))
}
}
}
}
data_dir <- "/home/asr/Desktop/ProjStat/Data"
wd <- "/home/asr/Desktop/ProjStat/Code"
setwd(wd)
df <- read.csv(paste(data_dir,"pph-subset2.csv", sep = "/"), stringsAsFactors = TRUE) %>% tibble()
#No variability in PrevKryo and Prev Multbirth, so remove this from the dataset.
df <- df %>% select(-c(PrevKryo,PrevMultbirth))
#PrevEpisotomi encodes the same information as PrevEpisiotomy, but the latter is coded as a factor. Keep the later
#PrevRBC and PrevRBC12 encode the same information
check_for_redundancy(df)
matrix(table(df[[col1]], df[[col2]]), nrow = 2)
matrix(table(df[["PrevPPH"]], df[["PrevSAGM"]]), nrow = 2)
summary(df)
View(df)
library(vroom)
library(tidyverse)
library(ggplot2)
library(gridExtra)
plot_marginals <- function(df, type = "count", ncol = 6){
if(type == "count"){
geom <- geom_col(fill = gray(0.5))
}
else{
geom <- geom_density(fill = gray(0.5))
}
lambda <- function(df, col){
#    if (!(col %in% c("age2", "year"))) {
#      count_text <- geom_text(aes(x = `get(col)`, y = mean(count),
#                                  label = paste(round(count*1e-3,0),"K",sep="")), size = 2)
#    } else {
count_text <- c()
#    }
df %>% group_by(get(col)) %>% summarise(count = n()) %>%
ggplot(aes(x = `get(col)`, y = count)) + geom + ylab("") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.2)) +
count_text + xlab(col)
}
lst_plt <- lapply(colnames(df), lambda, df = df)
n <- length(lst_plt)
do.call("grid.arrange", c(lst_plt, ncol=ncol))
}
data_dir <- "/home/asr/Desktop/ProjStat/Data"
wd <- "/home/asr/Desktop/ProjStat/Code"
setwd(wd)
df <- read.csv(paste(data_dir,"pph-subset2.csv", sep = "/"), stringsAsFactors = TRUE) %>% tibble()
#Print summary, note no missingness.
#summary(df)
#No variability in PrevKryo and Prev Multbirth, so remove this from the dataset.
df <- df %>% select(-c(PrevKryo,PrevMultbirth))
#PrevEpisotomi encodes the same information as PrevEpisiotomy, but the latter is coded as a factor. Keep the later
#PrevRBC and PrevRBC12 encode the same information
#PrevMacrosomia4500,PrevMacrosomia45, PrevMultMacro encode the same information
df <- df %>% select(-c(PrevEpisotomi,PrevRBC12, PrevMacrosomia4500,PrevMacrosomia45, PrevMultMacro))
#Other notes:
# - 3 very large observations of PrevTotal, >40 when rest are <30.
# - 2 of the three very large from above also have very large prevSAGM. This makes fine sense in terms of blood loss. Why did the last person not receive this
# - Last person has very large prevFFP as well. This makes good sense.
# - Some very large values of prevTK, but nothing to be really concerned about
# - PrevPlanned CS has two levels, suffix B means planned before labor, suffix A means acute
#Plot marginals, looks ok.
#plot_marginals(df)
saveRDS(df, paste(data_dir,"processeddata.rds", sep = "/"))
library(vroom)
library(tidyverse)
library(ggplot2)
library(gridExtra)
plot_marginals <- function(df, type = "count", ncol = 6){
if(type == "count"){
geom <- geom_col(fill = gray(0.5))
}
else{
geom <- geom_density(fill = gray(0.5))
}
lambda <- function(df, col){
#    if (!(col %in% c("age2", "year"))) {
#      count_text <- geom_text(aes(x = `get(col)`, y = mean(count),
#                                  label = paste(round(count*1e-3,0),"K",sep="")), size = 2)
#    } else {
count_text <- c()
#    }
df %>% group_by(get(col)) %>% summarise(count = n()) %>%
ggplot(aes(x = `get(col)`, y = count)) + geom + ylab("") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.2)) +
count_text + xlab(col)
}
lst_plt <- lapply(colnames(df), lambda, df = df)
n <- length(lst_plt)
do.call("grid.arrange", c(lst_plt, ncol=ncol))
}
data_dir <- "/home/asr/Desktop/ProjStat/Data"
wd <- "/home/asr/Desktop/ProjStat/Code"
setwd(wd)
df <- read.csv(paste(data_dir,"pph-subset2.csv", sep = "/"), stringsAsFactors = TRUE) %>% tibble()
#Print summary, note no missingness.
#summary(df)
#No variability in PrevKryo and Prev Multbirth, so remove this from the dataset.
df <- df %>% select(-c(PrevKryo,PrevMultbirth))
#PrevEpisotomi encodes the same information as PrevEpisiotomy, but the latter is coded as a factor. Keep the later
#PrevRBC and PrevRBC12 encode the same information
#PrevMacrosomia4500,PrevMacrosomia45, PrevMultMacro encode the same information
df <- df %>% select(-c(PrevEpisotomi,PrevRBC12, PrevMacrosomia4500, PrevMultMacro))
readRDS("/home/asr/Desktop/ProjStat/Data/preprocessed.rds")
readRDS("/home/asr/Desktop/ProjStat/Data/processeddata.rds")
m <- function(x){
cosh(exp(sin(x))/exp(cos(x)))
}
m(1)
m(2)
m(4)
m(6)
c <- seq(-10,10)
d <- seq(-10,10)
m(d)
d <- seq(-10,10, 0.1)
m(d)
c(1,"w")
m <- function(w){
w[2]*exp(sin(w[1]))/exp(cos(10*w[1]))
}
m <- function(w){
w[2]*exp(cos(w[1]))/exp(sin(10*w[1]))
}
m(c(1,2))
m(c(-,2))
m(c(-1,2))
rbernoulli(1)
rbinom(1)
rbinom(1,1)
rbinom(1,1,0.5)
rbinom(2,1,0.5)
rbinom(2,1,0.5)-0.5
sign(rbinom(2,1,0.5)-0.5)
rnorm(n=100)
simulate_from_plm <- function(g=g,m=m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- m(w1,w2) + rnorm(n=n)
Y <- A*theta + g(w1,w2) + rnorm(n=n)
}
library(tidyverse)
simulate_from_plm <- function(g=g,m=m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- m(w1,w2) + rnorm(n=n)
Y <- A*theta + g(w1,w2) + rnorm(n=n)
return(tibble(w1 = w1, w2 = w2, A = A, Y = Y))
}
simulate_from_plm()
simulate_from_plm <- function(g=g,m=m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- m(w1,w2) + rnorm(n=n)
Y <- A*theta + g(w1,w2) + rnorm(n=n)
return(tibble(w1 = w1, w2 = w2, A = A, Y = Y))
}
simulate_from_plm()
m <- function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))
}
g <- function(w1,w2){
-w2*exp(cos(w1))/exp(sin(10*w1))
}
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
n <- 10000
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- m(w1,w2) + rnorm(n=n)
Y <- A*theta + g(w1,w2) + rnorm(n=n)
theta = 0.5
Y <- A*theta + g(w1,w2) + rnorm(n=n)
tibble(w1 = w1, w2 = w2, A = A, Y = Y)
boot::inv.logit()
boot::inv.logit(1)
boot::inv.logit(100)
boot::inv.logit(10)
A <- numeric(m(w1,w2) + rnorm(n=n) > 0)
A <- (m(w1,w2) + rnorm(n=n) > 0)
a
A
as.numeric()
as.numeric(A)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
A
mean(A)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n))
Y
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
Y
mean(Y)
simulate_from_plm <- function(g=g,m=m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
tibble(w1 = w1, w2 = w2, A = A, Y = Y)
}
simulate_from_plm(g,m , )
simulate_from_plm()
simulate_from_plm
simulate_from_plm()
m <- function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))
}
g <- function(w1,w2){
-w2*exp(cos(w1))/exp(sin(10*w1))
}
simulate_from_plm <- function(g=g,m=m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
tibble(w1 = w1, w2 = w2, A = A, Y = Y)
}
simulate_from_plm()
simulate_from_plm <- function(g=g,m=m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
tibble(w1 = w1, w2 = w2, A = A, Y = Y)
}
m <- function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))
}
g <- function(w1,w2){
-w2*exp(cos(w1))/exp(sin(10*w1))
}
simulate_from_plm()
simulate_from_plm(g,m)
df <- simulate_from_plm(g,m)
df$Y==0
df$Y==1*df$A==0
(df$Y==1)*(df$A==0)
df$Y
df$Y[df$A == 1]
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
g <- function(w1,w2){
w2*exp(cos(w1))/exp(sin(10*w1))
}
simulate_from_plm <- function(g = g,m = m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
tibble(w1 = w1, w2 = w2, A = A, Y = Y)
}
df <- simulate_from_plm(g,m)
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
mean(df$Y[df$A == 1])
mean(df$Y[df$A == 0])
mean(df$Y[df$A == 1])-mean(df$Y[df$A == 0])
df <- simulate_from_model(g,m,0)
library(tidyverse)
readRDS("/home/asr/Desktop/ProjStat/Data/processeddata.rds")
m <- function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))
}
g <- function(w1,w2){
w2*exp(cos(w1))/exp(sin(10*w1))
}
simulate_from_model <- function(g = g,m = m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
tibble(w1 = w1, w2 = w2, A = A, Y = Y)
}
df <- simulate_from_model(g,m,0)
mean(df$Y[df$A == 1])-mean(df$Y[df$A == 0])
df <- simulate_from_model(g,m,1)
mean(df$Y[df$A == 1])-mean(df$Y[df$A == 0])
df <- simulate_from_model(g,m,2)
mean(df$Y[df$A == 1])-mean(df$Y[df$A == 0])
list(1)
simulate_from_model <- function(g = g,m = m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0)
)
}
simulate_from_model(g,m,2)
mean(df$Y[df$A == 1])-mean(df$Y[df$A == 0])
mean(df$Y[df$A == 1])-
simulate_from_model <- function(g = g,m = m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0)
)
}
simulate_from_model(g,m,2)
simulate_from_model(g,m,3)
simulate_from_model(g,m,10)
simulate_from_model(g,m,20)
simulate_from_model(g,m,20)
simulate_from_model(g,m,0)
simulate_from_model(g,m,0)
simulate_from_model(g,m,0)
simulate_from_model(g,m,1)
simulate_from_model(g,m,1)
simulate_from_model(g,m,1)
simulate_from_model(g,m,1)
simulate_from_model()
simulate_from_model(g,m)
simulate_from_model()
simulate_from_model(g,m)
simulate_from_model()
simulate_from_model <- function(g = g,m = m,theta=0.5, n = 10000){
browser()
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0)
)
}
simulate_from_model()
rnorm(n = n)
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
m(w1,w2)
m
simulate_from_model <- function(g = g,m = function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))
},theta=0.5, n = 10000){
browser()
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0)
)
}
simulate_from_model()
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
q
simulate_from_model <- function(g = g,m = m,theta=0.5, n = 10000){
#browser()
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0)
)
}
simulate_from_model()
simulate_from_model <- function(g = g,m = m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0)
)
}
simulate_from_model()
simulate_from_model <- function(g,m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect <- mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0)
)
}
simulate_from_model(g,m)
simulate_from_model <- function(g,m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect = tibble(true_outcome = mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0),
true_propensity = mean(m(w1,w2)>0))
)
}
simulate_from_model(g,m)
simulate_from_model(g,m)
simulate_from_model(g,m)
m <- function(w1,w2){
w2*exp(sin(w1))/exp(cos(10*w1))-2
}
g <- function(w1,w2){
w2*exp(cos(w1))/exp(sin(10*w1))
}
simulate_from_model <- function(g,m,theta=0.5, n = 10000){
w1 <- rnorm(n = n)
w2 <- sign(rbinom(n,1,0.5)-0.5)
A <- as.numeric(m(w1,w2) + rnorm(n=n) > 0)
Y <- as.numeric(A*theta + g(w1,w2) + rnorm(n=n) > 0)
list(
out_frame = tibble(w1 = w1, w2 = w2, A = A, Y = Y),
avg_effect = tibble(true_outcome = mean(theta + g(w1,w2)>0) - mean(g(w1,w2)>0),
true_propensity = mean(m(w1,w2)>0))
)
}
simulate_from_model(g,m)
simulate_from_model(g,m)$out_frame
df <- simulate_from_model(g,m)$out_frame
glm(Y ~ A, family = binomial())
glm(Y ~ A, family = binomial())$resid
mod <- glm(Y ~ A, family = binomial())
predict(mod)
predict(mod, type = "response")
predict(mod, type = "response")==Y
predict(mod, type = "response")>0.5
as.numeric(predict(mod, type = "response")>0.5)
predict(mod, type = "response")
mod <- glm(Y ~ A-1, family = binomial())
predict(mod, type = "response")
simulate_from_model(g,m)
mod <- glm(Y ~ A-1, family = binomial())
predict(mod, type = "response")
mod <- glm(Y ~ A-1, family = binomial(), data = df)
mod
predict(mod, newdata = tibble(A = c(1,0)) type = "response")
predict(mod, newdata = tibble(A = c(1,0)), type = "response")
